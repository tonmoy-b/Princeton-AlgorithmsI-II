name: Java Lint and Format

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache tools
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository/com/google/googlejavaformat
          ~/.m2/repository/com/github/spotbugs
        key: ${{ runner.os }}-java-tools-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-java-tools-

    - name: Download Google Java Format
      run: |
        mkdir -p tools
        wget -O tools/google-java-format.jar https://github.com/google/google-java-format/releases/download/v1.19.2/google-java-format-1.19.2-all-deps.jar

    - name: Download Checkstyle
      run: |
        wget -O tools/checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.12.5/checkstyle-10.12.5-all.jar

    - name: Find all Java files
      run: |
        find . -name "*.java" -not -path "./tools/*" > java_files.txt
        echo "Found $(wc -l < java_files.txt) Java files"

    - name: Run Checkstyle (Linting)
      run: |
        if [ -s java_files.txt ]; then
          echo "Running Checkstyle..."
          java -jar tools/checkstyle.jar -c /google_checks.xml $(cat java_files.txt) || true
        else
          echo "No Java files found to lint"
        fi

    - name: Format Java files
      run: |
        if [ -s java_files.txt ]; then
          echo "Formatting Java files..."
          java -jar tools/google-java-format.jar --replace $(cat java_files.txt)
          echo "Formatting complete"
        else
          echo "No Java files found to format"
        fi

    - name: Check for formatting changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ Files were reformatted:"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "✅ No formatting changes needed"
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add -A
        git commit -m "Auto-format Java files with Google Java Format [skip ci]"
        git push

    - name: Create custom Checkstyle config (if needed)
      run: |
        cat > custom_checkstyle.xml << 'EOF'
        <?xml version="1.0"?>
        <!DOCTYPE module PUBLIC
            "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
            "https://checkstyle.org/dtds/configuration_1_3.dtd">
        <module name="Checker">
          <property name="charset" value="UTF-8"/>
          <property name="severity" value="warning"/>
          <property name="fileExtensions" value="java, properties, xml"/>

          <module name="TreeWalker">
            <module name="OuterTypeFilename"/>
            <module name="IllegalTokenText">
              <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
              <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
              <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
            </module>
            <module name="AvoidEscapedUnicodeCharacters">
              <property name="allowEscapesForControlCharacters" value="true"/>
              <property name="allowByTailComment" value="true"/>
              <property name="allowNonPrintableEscapes" value="true"/>
            </module>
            <module name="LineLength">
              <property name="max" value="120"/>
              <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
            </module>
            <module name="OneTopLevelClass"/>
            <module name="NoLineWrap"/>
            <module name="EmptyBlock">
              <property name="option" value="TEXT"/>
              <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
            </module>
            <module name="NeedBraces"/>
            <module name="LeftCurly"/>
            <module name="RightCurly">
              <property name="id" value="RightCurlySame"/>
              <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
            </module>
            <module name="WhitespaceAround">
              <property name="allowEmptyConstructors" value="true"/>
              <property name="allowEmptyMethods" value="true"/>
              <property name="allowEmptyTypes" value="true"/>
              <property name="allowEmptyLoops" value="true"/>
            </module>
            <module name="OneStatementPerLine"/>
            <module name="MultipleVariableDeclarations"/>
            <module name="ArrayTypeStyle"/>
            <module name="MissingSwitchDefault"/>
            <module name="FallThrough"/>
            <module name="UpperEll"/>
            <module name="ModifierOrder"/>
            <module name="EmptyLineSeparator">
              <property name="allowNoEmptyLineBetweenFields" value="true"/>
            </module>
            <module name="SeparatorWrap">
              <property name="id" value="SeparatorWrapDot"/>
              <property name="tokens" value="DOT"/>
              <property name="option" value="nl"/>
            </module>
            <module name="PackageName">
              <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            </module>
            <module name="TypeName"/>
            <module name="MemberName">
              <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            </module>
            <module name="ParameterName">
              <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            </module>
            <module name="LocalVariableName">
              <property name="tokens" value="VARIABLE_DEF"/>
              <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            </module>
            <module name="ClassTypeParameterName">
              <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            </module>
            <module name="MethodTypeParameterName">
              <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            </module>
            <module name="InterfaceTypeParameterName">
              <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            </module>
            <module name="NoFinalizer"/>
            <module name="GenericWhitespace"/>
            <module name="Indentation">
              <property name="basicOffset" value="2"/>
              <property name="braceAdjustment" value="0"/>
              <property name="caseIndent" value="2"/>
              <property name="throwsIndent" value="4"/>
              <property name="lineWrappingIndentation" value="4"/>
              <property name="arrayInitIndent" value="2"/>
            </module>
            <module name="MethodParamPad"/>
            <module name="NoWhitespaceAfter"/>
            <module name="NoWhitespaceBefore"/>
            <module name="OperatorWrap">
              <property name="option" value="NL"/>
              <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
            </module>
          </module>
        </module>
        EOF

    - name: Run Checkstyle with custom config (Alternative)
      run: |
        if [ -s java_files.txt ]; then
          echo "Running Checkstyle with custom config..."
          java -jar tools/checkstyle.jar -c custom_checkstyle.xml $(cat java_files.txt) || true
        fi
